pipeline {
  agent any
  parameters {
    choice(
    choices: ['sun_checks', 'sun_checks_with_suppressions', 'custom_checks', 'custom_checks_with_suppressions'],
    description: 'Select xml file with checkstyle rules',
    name: 'CHECKSTYLE_RULES_SET')}
  stages {
    stage('Build'){
      options {
          timeout(time:10, unit: 'MINUTES' )
          }
      steps{
      echo 'Download dependencies'
        withMaven(maven:"maven-387", publisherStrategy: 'EXPLICIT'){
          sh "cd api \n\
          mvn install -P default"
          }
        }
    }
    stage('Static code analysis'){
        options {
            timeout(time:10, unit: 'MINUTES' )
            }
        steps{
          script{
            echo 'Static code analysis'
            currentCheckstyleRulesStr = getCheckstyleRules(params.CHECKSTYLE_RULES_SET)
            sh "echo ${currentCheckstyleRulesStr} \n\
            cd api\n\
              mvn -X install -P static-code-analysis ${currentCheckstyleRulesStr}\n\
              echo \"static code analysis finished\""
              }
            
            echo "Reading static analysis report"
            recordIssues enabledForFailure: true, failOnError: false, tool:checkStyle(pattern: "**/target/checkstyle-result.xml")
            recordIssues enabledForFailure: true, failOnError: false, tool:spotBugs(pattern: "**/target/spotbugs*.xml")
            recordIssues enabledForFailure: true, failOnError: false, tool:cpd(pattern: "**/target/cpd.xml")
            recordIssues enabledForFailure: true, failOnError: false, tool:pmdParser(pattern: "**/target/pmd.xml")
        }
    }        

   stage('Test'){
      options {
          timeout(time:10, unit: 'MINUTES' )
      }
      steps{
        script{
          echo 'Test'
          sh "cd api\n\
          mvn install -P tests"
      }
          
          publishHTML([
            allowMissing: true,
            keepAll:true,
            alwaysLinkToLastBuild: true,
            reportDir: 'api/target/site/jacoco',
            reportFiles: 'index.html',
            reportName: 'Jacoco coverage HTML report'])
      }        
  }
  }
}

def getCheckstyleRules(String selectedCheckstyleRules) {
  String mvnOptions = ''
    switch(selectedCheckstyleRules){
      case "sun_checks":
            mvnOptions = '-Dcodestyle.checks.file=./codestyle/sun_checks.xml'
            break
      case "sun_checks_with_suppressions":
            mvnOptions = '-Dcodestyle.checks.file=./codestyle/sun_checks.xml -Dcodestyle.suppressions.file=./codestylecheckstyle-suppressions.xml'
            break
      case "custom_checks":
            mvnOptions = '-Dcodestyle.checks.file=./codestyle/checkstyle_checks.xml'
            break
      case "custom_checks_with_suppressions":
            mvnOptions = '-Dcodestyle.checks.file=./codestyle/checkstyle_checks.xml -Dcodestyle.suppressions.file=./codestylecheckstyle-suppressions.xml'
            break
      default:
            mvnOptions = ' h lkjh lkjhjlkhjklhjklhlhkjkjkjkj ;kj jk;'
            break
      }  
      return mvnOptions
}